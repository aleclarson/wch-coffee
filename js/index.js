// Generated by CoffeeScript 2.2.4
var coffee, compile, fs, getDest, log, path, plugin, wch;

path = require('path');

wch = require('wch');

fs = require('fsx');

plugin = wch.plugin();

coffee = require('./coffee');

coffee.log = plugin.log;

plugin.on('run', function() {
  var files;
  coffee.init();
  files = plugin.watch('src', {
    fields: ['name', 'exists', 'new', 'mtime_ms'],
    include: ['**/*.coffee'],
    exclude: ['__*__']
  });
  files.filter(function(file) {
    return file.exists;
  }).read(compile).save(function(file) {
    return file.dest;
  }).then(function(dest, file) {
    return wch.emit('file:build', {
      file: file.path,
      dest
    });
  });
  return files.filter(function(file) {
    return !file.exists;
  }).delete(getDest).then(function(dest, file) {
    return wch.emit('file:delete', {
      file: file.path,
      dest
    });
  });
});

plugin.on('add', function(root) {
  root.dest = path.dirname(root.main || 'js/index');
  root.getDest = getDest;
  root.compile = coffee.load(root);
});

module.exports = plugin;


// Helpers

({log} = plugin);

getDest = function(file) {
  return path.join(this.path, this.dest, file.name.replace(/\.coffee$/, '.js'));
};

compile = async function(input, file) {
  var err, loc, mtime, output;
  file.dest = this.getDest(file);
  try {
    mtime = fs.stat(file.dest).mtime.getTime();
  } catch (error) {}
  if (mtime && mtime > file.mtime_ms) {
    return;
  }
  if (typeof this.compile !== 'function') {
    this.compile = (await this.compile);
  }
  if (log.verbose) {
    log.pale_yellow('Transpiling:', file.path);
  }
  try {
    return output = this.compile(input, {
      filename: file.path,
      header: true,
      bare: true
    });
  } catch (error) {
    err = error;
    loc = err.location;
    wch.emit('file:error', {
      file: file.path,
      message: err.message,
      location: [[loc.first_line, loc.first_column], [loc.last_line || loc.first_line, loc.last_column + 1]]
    });
    if (log.verbose) {
      log.red('Failed to compile:', file.path);
      log.gray(err.message);
    }
  }
};
