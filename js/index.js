// Generated by CoffeeScript 2.2.4
var INSTALL_DIR, fs, getDest, getVersion, huey, installed, loadTranspiler, loaded, log, onError, os, path, semver, streams, tarInstall, tarUrl, transpile, wch;

tarInstall = require('tar-install');

tarUrl = require('tar-url');

semver = require('semver');

huey = require('huey');

path = require('path');

wch = require('wch');

fs = require('fsx');

os = require('os');

exports.run = function() {
  if (fs.isDir(INSTALL_DIR)) {
    return fs.readDir(INSTALL_DIR).forEach(function(name) {
      var version;
      if (version = /-([^-]+)$/.exec(name)[1]) {
        return installed.add(version);
      }
    });
  }
};

exports.add = async function(root) {
  var coffee, dep, dest, pack, packPath, src, stream;
  packPath = path.join(root, 'package.json');
  pack = JSON.parse(fs.readFile(packPath));
  dep = getVersion(pack.devDependencies);
  coffee = (await loadTranspiler(dep.name, dep.version));
  src = path.join(root, 'src');
  dest = path.join(root, path.dirname(pack.main || 'js/index'));
  stream = wch.stream(src, {
    clock: false,
    fields: ['name', 'exists', 'new', 'mtime_ms'],
    include: ['**/*.coffee'],
    exclude: ['__*__']
  });
  stream.on('data', function(file) {
    if (file.exists) {
      transpile(file, getDest(dest, file.name), coffee);
      return;
    }
    // Remove the associated .js file
    fs.removeFile(getDest(dest, file.name));
  });
  stream.on('error', onError);
  streams.set(root, stream);
};

exports.remove = function(root) {
  streams.get(root).destroy();
  return streams.delete(root);
};

exports.end = function() {
  streams.forEach(function(stream) {
    return stream.destroy();
  });
  return streams.clear();
};


// Internal

// Where versions are installed
INSTALL_DIR = path.join(os.homedir(), '.coffee');

// Installed versions
installed = new Set;

// Loaded transpilers
loaded = new Map;

// Active file streams
streams = new Map;

log = function(...args) {
  return wch.log.coal('[coffee]', ...args);
};

log.verbose = !!process.env.VERBOSE;

huey.log(log, !process.env.NO_COLOR);

transpile = function(file, dest, coffee) {
  var err, input, loc, mtime, output;
  try {
    mtime = fs.stat(dest).mtimeMs;
  } catch (error) {}
  if (mtime && mtime > file.mtime_ms) {
    return;
  }
  if (log.verbose) {
    log.pale_yellow('Transpiling:', file.path);
  }
  input = fs.readFile(file.path);
  try {
    output = coffee.compile(input, {
      filename: file.path,
      header: true,
      bare: true
    });
  } catch (error) {
    err = error;
    loc = err.location;
    wch.emit('compile:error', {
      file: file.path,
      message: err.message,
      location: [[loc.first_line, loc.first_column], [loc.last_line || loc.first_line, loc.last_column]]
    });
    if (log.verbose) {
      log.red('Failed to compile:', file.path);
      log.gray(err.stack);
    }
    return;
  }
  fs.writeDir(path.dirname(dest));
  fs.writeFile(dest, output);
  wch.emit('compile', {
    file: file.path,
    dest
  });
};

getDest = function(dir, name) {
  return path.join(dir, name.replace(/\.coffee$/, '.js'));
};

getVersion = function(deps) {
  var name, version;
  name = 'coffee-script';
  if (version = deps[name]) {
    return {name, version};
  }
  name = 'coffeescript';
  if (version = deps[name]) {
    return {name, version};
  }
  return {
    name,
    version: '*'
  };
};

// Find matching version or install it
loadTranspiler = async function(name, version) {
  var coffee, match, pack, res, url;
  match = semver.maxSatisfying(Array.from(installed), version);
  if (match) { // Use an installed version.
    if (coffee = loaded.get(match)) {
      return coffee;
    }
    pack = path.join(INSTALL_DIR, name + '-' + match);
    version = match; // Install the missing version.
  } else {
    url = (await tarUrl(name, version));
    if (url === null) {
      return log.pale_red('Invalid version:', version);
    }
    res = (await tarInstall(url, INSTALL_DIR));
    pack = res.path;
    installed.add(version = /-([^-]+)$/.exec(pack)[1]);
    log.pale_green('Installed:', name + '@' + version);
  }
  log.pale_yellow('Loading:', pack);
  coffee = require(pack);
  loaded.set(version, coffee);
  return coffee;
};

onError = function(err) {
  if (log.verbose) {
    return log.pale_red(err.name + ':', err.message);
  } else {
    return log(err.stack);
  }
};
